{"version":3,"sources":["logo.svg","Pokedex.js","Pokecard.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Pokecard","react_default","a","createElement","className","this","props","name","src","image","type","exp","React","Component","Pokemon_list","id","base_experience","list_one","list_two","i","x","Math","floor","random","length","includes","push","splice","console","log","images","argument","concat","Pokedex","new_array","map","item","src_Pokecard_0","new_array2","forEach","calculate_exp1","calculate_exp2","App","src_Pokedex_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4HCoBxC,+FCDeC,gMAdP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAKE,KAAKC,MAAMC,MAChBN,EAAAC,EAAAC,cAAA,OAAKK,IAAKH,KAAKC,MAAMG,QACrBR,EAAAC,EAAAC,cAAA,kBAAUE,KAAKC,MAAMI,MACrBT,EAAAC,EAAAC,cAAA,iBAASE,KAAKC,MAAMK,cARjBC,IAAMC,YDCvBC,EAAe,CACjB,CAACC,GAAI,EAAGR,KAAM,aAAcG,KAAM,OAAQM,gBAAiB,IAC3D,CAACD,GAAI,EAAGR,KAAM,WAAYG,KAAM,QAASM,gBAAiB,IAC1D,CAACD,GAAI,GAAIR,KAAM,UAAWG,KAAM,MAAOM,gBAAiB,IACxD,CAACD,GAAI,GAAIR,KAAM,aAAcG,KAAM,SAAUM,gBAAiB,KAC9D,CAACD,GAAI,GAAIR,KAAM,UAAWG,KAAM,WAAYM,gBAAiB,KAC7D,CAACD,GAAI,GAAIR,KAAM,aAAcG,KAAM,SAAUM,gBAAiB,IAC9D,CAACD,GAAI,GAAIR,KAAM,SAAUG,KAAM,SAAUM,gBAAiB,KAC1D,CAACD,GAAI,IAAKR,KAAM,QAASG,KAAM,SAAUM,gBAAiB,KAExDC,EAAW,GAGXC,EAAW,GAGTC,EAAG,EAAGA,GAAG,EAAGA,IAAI,CACpB,IAAMC,EAAIC,KAAKC,MAAMD,KAAKE,SAAST,EAAaU,SACxCP,EAASQ,SAASX,EAAaM,KAAKH,EAASO,OAAO,GACpDP,EAASS,KAAKZ,EAAaM,IAC3BN,EAAaa,OAAOP,EAAG,KAEvBF,EAASQ,KAAKZ,EAAaM,IAC3BN,EAAaa,OAAOP,EAAG,IAInCQ,QAAQC,IAAIZ,GACZW,QAAQC,IAAIX,GAGZ,IAAMY,EAAS,SAACC,GACZ,MACI,6DAAAC,OADDD,EAAW,GAC0D,KAAKA,EACpEA,EAAW,IACoD,IAAIA,EAEJA,EAJpE,SA4DOE,mLAlDP,IAAMC,EAAYjB,EAASkB,IAAI,SAACC,GAC5B,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,CACK9B,KAAO6B,EAAK7B,KACZE,MAAQqB,EAAOM,EAAKrB,IACpBL,KAAM0B,EAAK1B,KACXC,IAAKyB,EAAKpB,oBAGpBsB,EAAapB,EAASiB,IAAI,SAACC,GAC7B,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,CACK9B,KAAO6B,EAAK7B,KACZE,MAAQqB,EAAOM,EAAKrB,IACpBL,KAAM0B,EAAK1B,KACXC,IAAKyB,EAAKpB,oBAiB1B,OACIf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAY,WAAhB,WACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACZ8B,GAELjC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACbH,EAAAC,EAAAC,cAAA,kCArBW,WACnB,IAAIiB,EAAI,EAIR,OAHAH,EAASsB,QAAQ,SAACH,GACdhB,GAAMgB,EAAKpB,kBAERI,EAgB2BoB,KAE9BvC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACZkC,GAELrC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WACbH,EAAAC,EAAAC,cAAA,kCApBW,WACnB,IAAIiB,EAAI,EAIR,OAHAF,EAASqB,QAAQ,SAACH,GACdhB,GAAMgB,EAAKpB,kBAERI,EAe2BqB,aA7CxB7B,IAAMC,WE1CLD,IAAMC,UCYd6B,MARf,WACE,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,aACfH,EAAAC,EAAAC,cAACwC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9d0eb6c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Pokedex.css';\r\nimport Pokecard from './Pokecard.js'\r\n\r\nconst Pokemon_list = [\r\n    {id: 4, name: 'Charmander', type: 'fire', base_experience: 62},\r\n    {id: 7, name: 'Squirtle', type: 'water', base_experience: 63},\r\n    {id: 11, name: 'Metapod', type: 'bug', base_experience: 72},\r\n    {id: 12, name: 'Butterfree', type: 'flying', base_experience: 178},\r\n    {id: 25, name: 'Pikachu', type: 'electric', base_experience: 112},\r\n    {id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95},\r\n    {id: 94, name: 'Gengar', type: 'poison', base_experience: 225},\r\n    {id: 133, name: 'Eevee', type: 'normal', base_experience: 65}\r\n]\r\nconst list_one = [\r\n]\r\n\r\nconst list_two = [\r\n]\r\n\r\nfor(var i =0; i<=7; i++){\r\n    const x = Math.floor(Math.random()*Pokemon_list.length);\r\n        if(!list_one.includes(Pokemon_list[x])&&list_one.length<4){\r\n            list_one.push(Pokemon_list[x])\r\n            Pokemon_list.splice(x, 1);\r\n        }else{\r\n            list_two.push(Pokemon_list[x])\r\n            Pokemon_list.splice(x, 1);\r\n        }\r\n}\r\n\r\nconsole.log(list_one)\r\nconsole.log(list_two)\r\n\r\n\r\nconst images = (argument)=>{\r\n    if(argument < 10){\r\n        return `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${'00'+argument}.png`\r\n    }else if(argument < 100){\r\n        return `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${'0'+argument}.png`\r\n    }else{\r\n        return `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${argument}.png`\r\n    }\r\n}\r\n\r\nclass Pokedex extends React.Component{\r\n    render(){\r\n        const new_array = list_one.map((item)=>{\r\n            return <Pokecard \r\n                        name= {item.name}\r\n                        image= {images(item.id)}\r\n                        type={item.type}\r\n                        exp={item.base_experience}\r\n                    />\r\n        })\r\n        const new_array2 = list_two.map((item)=>{\r\n            return <Pokecard \r\n                        name= {item.name}\r\n                        image= {images(item.id)}\r\n                        type={item.type}\r\n                        exp={item.base_experience}\r\n                    />\r\n        })\r\n        const calculate_exp1 = ()=>{\r\n            let x = 0;\r\n            list_one.forEach((item)=>{\r\n                x = x+item.base_experience\r\n            })\r\n            return x\r\n        }\r\n        const calculate_exp2 = ()=>{\r\n            let x = 0;\r\n            list_two.forEach((item)=>{\r\n                x = x+item.base_experience\r\n            })\r\n            return x\r\n        }\r\n        return(\r\n            <div>\r\n                <h1 className = 'Pokedex'>Pokedex</h1>\r\n                <div className = 'divider'>\r\n                    {new_array}\r\n                </div>\r\n                <div className = 'divider'>\r\n                    <h2>Hand one experience: {calculate_exp1()}</h2>\r\n                </div>\r\n                <div className = 'divider'>\r\n                    {new_array2}\r\n                </div>\r\n                <div className = 'divider'>\r\n                    <h2>Hand two experience: {calculate_exp2()}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokedex","import React from 'react';\r\nimport './Pokecard.css'\r\n\r\nclass Pokecard extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <div className='Pokecard'>\r\n                    <h1>{this.props.name}</h1>\r\n                    <img src={this.props.image}/>\r\n                    <p>Type: {this.props.type}</p>\r\n                    <p>EXP: {this.props.exp}</p>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokecard","import React from 'react';\r\nimport Pokedex from './Pokedex.js'\r\n\r\nclass Pokegame extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Pokedex />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pokegame","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Pokedex from './Pokedex.js';\nimport Pokegame from './Pokegame.js';\n\nfunction App() {\n  return (\n    <div className = 'container'>\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WHERE WE LOAD OUT STUFF FROM -- LOADING ZONE *************\n// **********************************************************\n// NEVER TOUCH\n\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}